from fastapi import APIRouter, HTTPException, Body
from pydantic import BaseModel
from typing import Optional, List, Dict, Any
import os
import time
from datetime import datetime
import logging
import json
import google.generativeai as genai

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load API key from environment variable
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)

# Initialize router with prefix
router = APIRouter(
    prefix="/research",
    tags=["legal research"],
    responses={404: {"description": "Not found"}},
)

class ResearchRequest(BaseModel):
    query: str
    context: Optional[str] = None
    sources: Optional[str] = None
    jurisdiction: Optional[str] = None
    time_period_start: Optional[str] = None
    time_period_end: Optional[str] = None
    relevance_threshold: Optional[str] = None
    include_dissenting: Optional[str] = None
    include_overruled: Optional[str] = None
    result_format: Optional[str] = None
    max_results: Optional[str] = None

@router.post("")
async def conduct_research(request: ResearchRequest):
    """
    Conduct comprehensive legal research on a given query.
    """
    start_time = time.time()
    logger.info(f"Received legal research request: {request.query[:100]}...")
    
    try:
        if not GEMINI_API_KEY:
            return {
                "success": False,
                "error": "AI model not available",
                "processing_time": time.time() - start_time,
                "timestamp": datetime.now().isoformat()
            }
        
        # Create specialized research prompt
        prompt = f"""
        You are a professional legal researcher with access to comprehensive legal databases, including case law, statutes, regulations, and legal commentary.
        
        CONDUCT LEGAL RESEARCH ON THE FOLLOWING QUESTION:
        
        RESEARCH QUESTION: {request.query}
        
        ADDITIONAL CONTEXT: {request.context or "No additional context provided."}
        
        SOURCES TO INCLUDE: {request.sources or "All relevant legal sources"}
        JURISDICTION: {request.jurisdiction or "All US jurisdictions"}
        TIME PERIOD: Past {request.time_period_end or "20"} years to {request.time_period_start or "1"} year ago
        RELEVANCE THRESHOLD: {request.relevance_threshold or "0.75"}
        INCLUDE DISSENTING OPINIONS: {request.include_dissenting or "false"}
        INCLUDE OVERRULED CASES: {request.include_overruled or "false"}
        RESULT FORMAT: {request.result_format or "Comprehensive"}
        MAX RESULTS: {request.max_results or "20"}
        
        Provide a well-structured legal research report that includes the following components (unless the result format specifies otherwise):
        
        1. EXECUTIVE SUMMARY: A concise summary of your findings
        2. RELEVANT LEGAL FRAMEWORK: Key statutes, regulations, or constitutional provisions
        3. KEY CASES: Important precedents with full citations and holdings
        4. ANALYSIS: Discussion of how the law applies to the research question
        5. TRENDS: Recent developments or trends in this area of law
        6. CONCLUSION: Final assessment and practical implications
        
        Format your response in Markdown with clear headings and sections. Cite specific cases using proper legal citation format.
        Include a disclaimer at the end that this research was generated by an AI and should not be considered legal advice.
        
        Also include the following metadata in your response:
        - Sources searched
        - Relevance score (a number between 0 and 1)
        - Number of cases analyzed
        """
        
        # Generate research
        model = genai.GenerativeModel('gemini-1.5-pro')
        response = model.generate_content(prompt)
        
        # Process the response
        research_content = response.text
        sources_searched = "Multiple Legal Databases"
        relevance_score = 0.9  # In a real implementation, this would be calculated
        citations = extract_citations(research_content)
        
        logger.info(f"Legal research completed in {time.time() - start_time:.2f}s")
        return {
            "success": True,
            "research": {
                "content": research_content,
                "sources_searched": sources_searched,
                "relevance_score": relevance_score,
                "citations": citations,
                "processing_time": time.time() - start_time
            },
            "timestamp": datetime.now().isoformat()
        }
    
    except Exception as e:
        logger.error(f"Error conducting legal research: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Error conducting research: {str(e)}")

def extract_citations(text: str) -> str:
    """
    Extract legal citations from the research text.
    This is a placeholder function - in a real implementation, you would use regex 
    patterns to identify and extract citations.
    """
    # Placeholder implementation
    citations = []
    lines = text.split("\n")
    
    for line in lines:
        if " v. " in line and "(" in line and ")" in line:
            citations.append(line.strip())
    
    return "\n".join(citations) 